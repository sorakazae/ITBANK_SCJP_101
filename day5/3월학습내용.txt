
- 담당 강사명 : 김 정현
         unicodaum@hanmail.net(010-3312-7494)















- 테스트 환경
  강사시스템 접근시 : 시작 --> 실행
  		\\192.168.0.79 --> WeekJAVA_AM
  - 설치파일
    Java 7(JDK), c:\Program Files\Java
    JDK Documentation 
    Eclipse kepler(4.3)









- 8일간의 학습 스케쥴
  1일차 - 테스트 환경 구축, 자바언어의 특징, 데이타 타입, 변수 선언,  키워드, 연산자
  2일차 - 연산자, 제어문, 제어문관련 간단 실습

  3일차 - 제어문, 배열, 명령 행 데이타(프로그램 아규먼트), 메서드정의 실습
  4일차 - OOP1 - 클래스 정의와 객체 생성

  5일차 - OOP1에 대한 실습, OOP1에 대한 보강
  6일차 - OOP2 - 상속

  7일차 - 다형성, 추상클래스, 인터페이스, 예외처리 
  8일차 - Java의 주요 API(java.lang, java.util, java.io)







Java1 --> Java2  --> Java3
         --> 안드로이드
         --> Java3








[ 수업 시간 ]

9시 5분 - 10시  1교시
10시 10분 - 11시 2교시
11시 10분 - 12시 3교시
12시 - 12시 30분 간식시간
12시 30분 - 1시 20분 4교시
1시 30분 - 2시 20분 5교시






- 수강동의 : http://mgr.eduitbank.com/











http://java.sun.com/  --> http://www.oracle.com/technetwork/java/index.html
http://www.eclipse.org/











자바프로젝이름 : JavaExample
클래스명 : FirstApp


 javac FirstApp.java




[ 자바 구문의 학습 순서 ]

- 데이터 타입 
- 변수선언
- 연산자 
- 제어문(조건제어문, 반복제어문, 분기제어문)
- 배열
- 클래스의 정의와 객체 생성
- 상속
- 다형성 
- 추상클래스와 인터페이스 
- 예외처리
- (내부클래스)


[ 자바언어의 특징 ]

1. 컴파일 & 인터프리터 언어이다.   --> 플랫폼에 비의존적인 프로그램을 개발할 수 있는 언어
2. OOP 언어로서 구문이 매우 견고하게 설계되었다. 
3. 자바의 실행 파일은 2진 파일이 아니라 바이트코드 파일로서
    어떠한 운영체제와도 무관한 자바만의 실행파일 구조를 가지고 있다. 
4. 자동 가비지 컬렉션(GC)을 지원한다. --> JVM 이 대신한다. 
5. 기본적으로 동적 로딩을 지원한다. 

[ 자바의 데이터 타입 ]

 숫자형(정수형,실수형) - byte, short, int, long / float, double
 문자형                         - char
 문자열형                     - String(참조형)
 논리형                         - boolean

 데이터 타입 : 기본형 타입과 참조형(객체형) 타입
             기본형 타입 : 데이터의 값을 저장하여 처리하는 타입
             참조형 타입 : 데이터 값은 다른 곳에 저장되어 있고 이 저장된 곳을
                                  참조하도록 논리적인 주소값을 저장하여 처리하는 타입

기본형 타입 : byte(1), short(2), int(4), long(8), 
                     float(4), double(8), char(2), boolean(1)

 리터럴 : 프로그램에서 사용되는 데이터 값 자체를 의미한다.
              리터럴도 사용되는 방식에 따라 데이터 타입이 자동으로 정해진다.

              100, 200, 777777777, 7777777777L, 3.14, 10.0, 0.1, 3.14F
               int   int       int                 long                     double          float
              'a','가','1',' '('ab','가나',''(오류))                  문자형 리터럴
              "가나다", "123", "1", ""(null), "abc"         String(문자열)형 리터럴
              true, false                                                boolean형 리터럴
 
[ 변수 선언 ]

 -데이터 값을 저장하는 메모리상의 방              
 -필요한 만큼 직접 만들어서 사용해야 한다.(변수 선언)
  (자바에서는 자동으로 선언되어 사용되는 변수 : this, super)
 -변수에 저장할 값의 크기, 종류 등을 결정하여 변수의 타입과 변수의 이름을 정한다.
 -변수명은 길이에는 거의 제한이 없다.(65535자)
  명사,첫글자는 소문자로 시작한다, 새로운 워드가 등장하면 첫글자를 대문자로 한다.
  (name, telNumber,grade1, ...)
  자바의 식별자 규칙을 만족해야 한다.
  (숫자로 시작은 불가, 영문 대/소문자,_(언더바), $ 기호 사용이 가능하다.)

 타입 변수명;
 타입 변수명 = 초기값;


 -지역변수의 선언 위치가 정해져 있지 않다.(사용하기 전에만 선언하면 됨)

 -l-value : 방 (변수)
 -r-value : 값 (변수, 리터럴, 연산식, 리턴값이 있는 호출식 -----> 식)

  name = 100;
  name = otherName;

[ 자바의 키워드(예약어) ]

 byte, short, int, long, float, double, char, boolean           데이터 타입을 나타내는 예약어
 instanceof                                                                            연산자 예약어
 class, interface, extends, implements, new                     class 정의를 시작하는 예약어
 public, protected, private, static, abstract, final             제어자가 되는 예약어
 try, catch, finally, throws, throw                                       예외처리 구문과 관련된 예약어
 if, switch, else, default, case, for, while, do, break, continue    제어문과 관련된 예약어
 void, return

[ 자바의 연산자 ]

  연산식에 사용되는 항의 개수에 따라, 단항 연산자, 이항 연산자, 삼항 연산자로 구분


 . (멤버 연산자)
 ++, --, !, ~, (타입)
 *, /, %
 +, -
 >>, >>>, << (쉬프트 연산자)
 >, >=, <, <=                                                      	 연산 결과가 boolean형
 ==, !=, instanceof                                               	 연산 결과가 boolean형
 &, |, ^             비트별 연산자
 && (논리 연산자)
 ||    (논리 연산자)
 항1 ? 항2 : 항3 (삼항 연산자)
 =, +=, -=, *= ... (대입 연산자)(복합 기호 연산자)


 ++ : 단항연산자, 주어진 항의 값을 1 증가시키는 연산자     (증가 연산자)
         항의 앞과 뒤 모두 사용 가능
         항의 앞(전위형) : 먼저 증가시키고 다른 연산을 해라.
         항의 뒤(후위형) : 다른 연산을 먼저 수행하고 나중에 증가시켜라.
  -- : 감소시키는 기능이고 나머지는 ++연산자와 동일하다.   (감소 연산자)

  (타입) : 강제 형 변환 연산자, 캐스팅 연산자

              - 연산식에 사용되는 항들의 타입이 동일할 때는 결과도 그 동일한 타입 결과를 만든다.
              - 연산식에 사용되는 항들의 타입이 다를 때는 자동으로 하나의 타입으로
                일치해 놓고 연산한다. --> 자동 형 변환, 내부적 형변환
              - 자동 형변환(내부적 형변환)
                1. 정수타입 --> 실수타입
                2. 방의 크기가 작은 타입 --> 큰 타입

                  int + int --> int
                  long + long --> long
                  float + float --> float

                  int + long --> long
                  int + double --> double
                  long + float --> float (방식이 달라서 float 이 더 큰 범위 저장 가능)

                  char + char --> int  ( int형 보다 작은 타입은 int로 바꿔놓고 연산)
                  short + short --> int

                 - boolean 절대 형 변환 되지 않는다.
                 - 대입 연산시에도 r-value 와 l-value 가 
                   동일 타입이면 형 변환 없이 대입된다.(타입 관계없이)
                   다른 타입이면 r-value의 타입과 l-value의 타입이 
                                          자동 형 변환 관계이면 변환되어 대입된다.
                                          자동 형 변환 관계가 아니면 컴파일 오류가 발생한다. 

-------------------------------------------------------------------------day1------------------------------------------------------------------------------------

[ 기본형 타입간의 자동 형 변환 관계 ]

 bye < short < int < long < float < double

 char < int < long < float < double

 boolean : 자동이든 강제든 형 변환 불가

[ 제어문 ]

 조건 제어문 : if, switch
 반복 제어문 : for, while, do~while
 분기 제어문 : break, continue


 if(1) --> if(true) : 조건식 --> 연산 결과가 boolean 타입이 되는 식
                              boolean 변수, 리터럴
                              ==, !=, >, <, >=, <=, !, &&, ||, instanceof

 if(조건식)
  문장1;
 else
  문장2;


 if(조건식)
 문장1;
 else if(조건식2)
 문장2;
 else
 문장3;



 switch(int타입의 식(byte,short,char은 가능) 또는 String타입의 식){                (등가연산)
    case 값1 : 문장1;
                     문장2;
                     [break]    (각 case가 끝나면 break를 써주어야 다른 case까지 실행되지 않는다.)
    case 값2 : 문장3;
                     문장4;
                     문장5;
                     [break]
             :
    default : 문장6;
}

[ 반복문 ]

 for             : 횟수를 적용한 반복문에 적합
 while        : 어떠한 조건이 만족되는 동안 반복을 처리하려는 경우에 적합 (선 조건 후 수행) 
 do~while  : while 문과 동일한 조건에 사용되는 반복문
                     while 문을 보완하는 반복으로서
                     조건부터 평가한 후에 반복여부를 결정하는 while 문과는 다르게
                     do~while 문은 먼저 수행부터 하고 그 다음부터 조건식의 평가 여부에 따라
                     계속해서 수행할지의 여부를 결정한다.(선 수행 후 조건)

[ for 문 ]

 - 자바의 for 문은 2가지이다.
   기존 for문, 향상된 for문(JAVA5버전부터)

     기존 for문       : for(초기식; 조건식; 증감식)
     향상된 for문   :for(변수선언식 : 배열 또는 컬렉션객체)       (배열에 적합)

   - for(초기식;조건식;증감식)
     -초기식,증감식,조건식은 어떠한 것이든 생략 가능하다.
      for(;;)  --> 무한루프
     -초기식 : 변수를 선언하는 식 또는 이미 선언되어 있는 변수의 값을
                   할당하는 식을 주로 작성하며 변수를 여러 개 선언하는 것도 가능하다.
                    또 변수의 값을 할당하는 식도 여러 개 작성할 수 있는데
                   이 때에는 컴마(,)로 구분한다.

                   int i=0  (초기식)
                   int i=0, j=10 (초기식)      (다른 타입은 동시에 선언할 수 없다.)
                   x=100,y=10

   - 증감식 : 조건식에 사용되는 변수의 값을 변화시키는 식을 작성한다.
                  이 때에도 여러 개의 식을 작성할 수 있으며 컴마(,)로 구분한다.

                  i++        (증감식)
                  i++,j--    (증감식)
                  i+=5      (증감식)

   - 조건식 : 반드시 boolean(참,거짓) 타입의 식을 작성한다.
                  하나의 식만 올 수 있다.
                  여러 개의 조건을 필요로 할 때는 논리연산으로 결합하여
                  하나의 식으로 만들어야 한다. 

                  i< 10                (조건식)
                  i<10 && j> 0    (조건식)

[ while 문 ]

순수하게 주어진 조건이 참인동안 계속해서 반복처리되는 기능을 구현하고자 할 때 사용한다.

 while(조건식) 
    문장;

 while(1),while() --> while(true) : 무한루프

 선 조건 후 수행 반복문

[ do~while 문 ]

  - while 문을 확장한 반복문이다.
  - 선 수행 후 조건 반복문이다.
  - 조건식의 연산 결과가 처음부터 거짓이더라도 최소한 한번은 수행되는 것을
    보장받는 반복 처리에 적합하다.

[ break & continue ]

  - switch 문이나 반복문과 같은 제어문 안에서 제어문을 제어하고자 할 때 사용된다.

  - break : switch 문과 반복문 내에서 사용 가능하며
                "종료하라, 끝내라"라는 기능으로 사용된다. (끝내기)
  - continue : 반복문 내에서만 사용 가능하다.(switch문에서 사용 불가)
                    "다음 반복으로 계속해서 진행해라 또는 현재의 반복처리를 끝내고
                     다음 반복처리로 넘어가라"라는 기능으로 사용된다.
                     현재 반복처리를 끝내고 다음반복으로 넘어가라.(건너뛰기) 
  - 자바의 break 와 continue 는 라벨을 사용하여 외부에 있는 반복문을 제어할 수도 있다. (ex) BreakContinueTest

---------------------------------------------------------------------------day2-----------------------------------------------------------------------------

[ 배열 ]            배열 = 객체

 - 복수의 데이터들을 하나의 집합으로 다룰 수 있도록 지원하는 자료구조
 - 배열을 구성하는 각 데이터들을 원소(element) 또는 요소라고 한다.
 - 배열을 생성할 때는 배열을 통해서 몇 개의 데이터를 다룰 것인가? 또한 어떠한 타입의 데이터들을
   다룰 것인지를 먼저 결정해야 한다.
 - 배열을 생성하는 식 : new 데이터타입[크기]

   예) new int[10], new char[50], new double[5] ... 

 - 생성된 배열은 변수에 담아서 사용해야 한다.
   배열의 타입에 따라 적당한 배열 변수를 선언하여 담아서 사용해야 한다.
   배열 변수의 선언 방법 : 데이터타입 변수명[], 데이터타입[] 변수명

   예) int ary[], int[] cary, double dary[]

 - int ary[] = new int[10];      참조값(참조하게 된 배열의 주소값)이 담김 (배열변수는 참조형)

   ary[0], ary[1], ary[2] ... ary[9]


[ 메서드 ]

 - 자바에서의 메서드는 객체의 기능, 객체의 행위 이런것들을 정의하는 단위다.
 - 자바에서 수행 코드를 정의하는 단위다.
   변수를 선언하는 문장을 제외하고 모든 수행 문장은 메서드 안에 있어야 한다.
 - 메서드는 클래스 안에 정의해야 한다.
 - 메서드를 생성할 때 알아야 하는 구문
  (1) 메서드 명은 자바의 식별자 규칙을 준수해야 하며 가급적 동사로 시작하고 소문자로 시작한다.
        새로운 워드가 등장할 때 첫글자를 대문자로 한다.
       예) drawString(), drawRect(), setName(), getName()
  (2) 메서드의 명은 반드시 괄호를 붙여야 한다.
  (3) 메서드명 뒤에 붙는 괄호안에는 필요에 따라 변수를 선언한다.
        이 변수를 매개변수라고 하는데 (몇개를 선언하든) 개수와 타입에는 제한이 없다.
  (4) 메서드 명의 앞에는 리턴값의 타입을 지정해야 한다.
        리턴값이 없는 경우에는 void 라는 타입을 지정한다.
        리턴값은 반드시 하나만을 리턴할 수 있으며 여러 개의 값을 리턴해야 하는 경우에는
        배열 타입 또는 객체 타입을 사용한다.
  (5) 메서드명, 매개변수 사양, 리턴값의 유형을 정의하는 부분을 메서드 헤더라고 한다.
        메서드의 헤더 뒤에는 반드시 블럭({...}) 이 와야 하며 이 부분을 메서드 바디라고 한다.
        바로 이 메서드 바디에 수행 코드를 정의한다.

	[ 제어자 ] 리턴값의타입 메서드명([매개변수 선언]){

		// 수행코드

	}

 - 메서드의 호출

   메서드명, 매개변수 사양, 리턴값의 타입 등을 판단하여 호출식을 작성한다.

   리턴값이 없는 경우 : 메서드([매개변수에 전달할 데이터값의 리스트]);


   리턴값이 있는 경우 : 변수 =  메서드([매개변수에 전달할 데이터값의 리스트]);
                                   메서드([매개변수에 전달할 데이터값의 리스트]);

-------------------------------------------------------------------------------day3-----------------------------------------------------------------------------

 자바의 정석 - pdf자료 6-1,6-2

 - verbose:class         // vm아규먼트 - 프로그램 실행 과정을 보여줌

----------------------------------------------------------------------------day4-----------------------------------------------------------------------------

[ 클래스 ]

1.자바 프로그래밍 언어의 기본 구조
2.구축하고자 하는 시스템에서 필요로 하는 객체를 프로그램 코드로 만드는 것(객체의 설계도)
3.클래스는 필요한 만큼의 멤버 변수와 메서드로 구성된다.

[ 생성자 메서드 ]

 - 용도 : 클래스를 객체화(인스턴스화)할 때 객체를 초기화 하는 역할의 메서드
             객체 초기화란? 클래스의 인스턴스(non-static) 변수에 값을 할당하는 것
 - 생성방법 : 메서드명이 클래스 명과 동일해야 한다.
                    리턴값의 타입을 지정하지 않는다.
                    여러 개로 오버로딩이 가능하다.
                    this() 메서드를 사용하여 생성자 메서드 내에서 다른 생성자 호출하는 것이 
                    가능하다.(반드시 첫번째 수행 문장이어야 한다.)
                    this - this 가 구현된 클래스의 객체를 참조하는 변수 (자기자신을 참조하는 변수)
                             나 자신의 객체, 나의 멤버 xxx
                             매개변수(지역변수)와 맴버변수의 이름 동일할 때         (this.변수)
                             생성자 메서드, 일반 메서드에서 자동으로 선언되는 변수이다.

------------------------------------------------------------------------------day5----------------------------------------------------------------------------
















               
    













	
        
	










  











    



















       













 








