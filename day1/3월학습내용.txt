
- 담당 강사명 : 김 정현
         unicodaum@hanmail.net(010-3312-7494)















- 테스트 환경
  강사시스템 접근시 : 시작 --> 실행
  		\\192.168.0.79 --> WeekJAVA_AM
  - 설치파일
    Java 7(JDK), c:\Program Files\Java
    JDK Documentation 
    Eclipse kepler(4.3)









- 8일간의 학습 스케쥴
  1일차 - 테스트 환경 구축, 자바언어의 특징, 데이타 타입, 변수 선언,  키워드, 연산자
  2일차 - 연산자, 제어문, 제어문관련 간단 실습

  3일차 - 제어문, 배열, 명령 행 데이타(프로그램 아규먼트), 메서드정의 실습
  4일차 - OOP1 - 클래스 정의와 객체 생성

  5일차 - OOP1에 대한 실습, OOP1에 대한 보강
  6일차 - OOP2 - 상속

  7일차 - 다형성, 추상클래스, 인터페이스, 예외처리 
  8일차 - Java의 주요 API(java.lang, java.util, java.io)







Java1 --> Java2  --> Java3
         --> 안드로이드
         --> Java3








[ 수업 시간 ]

9시 5분 - 10시  1교시
10시 10분 - 11시 2교시
11시 10분 - 12시 3교시
12시 - 12시 30분 간식시간
12시 30분 - 1시 20분 4교시
1시 30분 - 2시 20분 5교시






- 수강동의 : http://mgr.eduitbank.com/











http://java.sun.com/  --> http://www.oracle.com/technetwork/java/index.html
http://www.eclipse.org/











자바프로젝이름 : JavaExample
클래스명 : FirstApp


 javac FirstApp.java






[ 자바언어의 특징 ]

1. 컴파일 & 인터프리터 언어이다.   --> 플랫폼에 비의존적인 프로그램을 개발할 수 있는 언어
2. OOP 언어로서 구문이 매우 견고하게 설계되었다. 
3. 자바의 실행 파일은 2진 파일이 아니라 바이트코드 파일로서
    어떠한 운영체제와도 무관한 자바만의 실행파일 구조를 가지고 있다. 
4. 자동 가비지 컬렉션(GC)을 지원한다. --> JVM 이 대신한다. 
5. 기본적으로 동적 로딩을 지원한다. 

[ 자바의 데이터 타입 ]

 숫자형(정수형,실수형) - byte, short, int, long / float, double
 문자형                         - char
 문자열형                     - String(참조형)
 논리형                         - boolean

 데이터 타입 : 기본형 타입과 참조형(객체형) 타입
             기본형 타입 : 데이터의 값을 저장하여 처리하는 타입
             참조형 타입 : 데이터 값은 다른 곳에 저장되어 있고 이 저장된 곳을
                                  참조하도록 논리적인 주소값을 저장하여 처리하는 타입

기본형 타입 : byte(1), short(2), int(4), long(8), 
                     float(4), double(8), char(2), boolean(1)

 리터럴 : 프로그램에서 사용되는 데이터 값 자체를 의미한다.
              리터럴도 사용되는 방식에 따라 데이터 타입이 자동으로 정해진다.

              100, 200, 777777777, 7777777777L, 3.14, 10.0, 0.1, 3.14F
               int   int       int                 long                     double          float
              'a','가','1',' '('ab','가나',''(오류))                  문자형 리터럴
              "가나다", "123", "1", ""(null), "abc"         String(문자열)형 리터럴
              true, false                                                boolean형 리터럴
 
[ 변수 선언 ]

 -데이터 값을 저장하는 메모리상의 방              
 -필요한 만큼 직접 만들어서 사용해야 한다.(변수 선언)
  (자바에서는 자동으로 선언되어 사용되는 변수 : this, super)
 -변수에 저장할 값의 크기, 종류 등을 결정하여 변수의 타입과 변수의 이름을 정한다.
 -변수명은 길이에는 거의 제한이 없다.(65535자)
  명사,첫글자는 소문자로 시작한다, 새로운 워드가 등장하면 첫글자를 대문자로 한다.
  (name, telNumber,grade1, ...)
  자바의 식별자 규칙을 만족해야 한다.
  (숫자로 시작은 불가, 영문 대/소문자,_(언더바), $ 기호 사용이 가능하다.)

 타입 변수명;
 타입 변수명 = 초기값;


 -지역변수의 선언 위치가 정해져 있지 않다.(사용하기 전에만 선언하면 됨)

 -l-value : 방 (변수)
 -r-value : 값 (변수, 리터럴, 연산식, 리턴값이 있는 호출식 -----> 식)

  name = 100;
  name = otherName;

[ 자바의 키워드(예약어) ]

 byte, short, int, long, float, double, char, boolean           데이터 타입을 나타내는 예약어
 instanceof                                                                            연산자 예약어
 class, interface, extends, implements, new                     class 정의를 시작하는 예약어
 public, protected, private, static, abstract, final             제어자가 되는 예약어
 try, catch, finally, throws, throw                                       예외처리 구문과 관련된 예약어
 if, switch, else, default, case, for, while, do, break, continue    제어문과 관련된 예약어
 void, return

[ 자바의 연산자 ]

  연산식에 사용되는 항의 개수에 따라, 단항 연산자, 이항 연산자, 삼항 연산자로 구분


 . (멤버 연산자)
 ++, --, !, ~, (타입)
 *, /, %
 +, -
 >>, >>>, << (쉬프트 연산자)
 >, >=, <, <=                                                      	 연산 결과가 boolean형
 ==, !=, instanceof                                               	 연산 결과가 boolean형
 &, |, ^             비트별 연산자
 && (논리 연산자)
 ||    (논리 연산자)
 항1 ? 항2 : 항3 (삼항 연산자)
 =, +=, -=, *= ... (대입 연산자)(복합 기호 연산자)


 ++ : 단항연산자, 주어진 항의 값을 1 증가시키는 연산자     (증가 연산자)
         항의 앞과 뒤 모두 사용 가능
         항의 앞(전위형) : 먼저 증가시키고 다른 연산을 해라.
         항의 뒤(후위형) : 다른 연산을 먼저 수행하고 나중에 증가시켜라.
  -- : 감소시키는 기능이고 나머지는 ++연산자와 동일하다.   (감소 연산자)

  (타입) : 강제 형 변환 연산자, 캐스팅 연산자

              - 연산식에 사용되는 항들의 타입이 동일할 때는 결과도 그 동일한 타입 결과를 만든다.
              - 연산식에 사용되는 항들의 타입이 다를 때는 자동으로 하나의 타입으로
                일치해 놓고 연산한다. --> 자동 형 변환, 내부적 형변환
              - 자동 형변환(내부적 형변환)
                1. 정수타입 --> 실수타입
                2. 방의 크기가 작은 타입 --> 큰 타입

                  int + int --> int
                  long + long --> long
                  float + float --> float

                  int + long --> long
                  int + double --> double
                  long + float --> float (방식이 달라서 float 이 더 큰 범위 저장 가능)

                  char + char --> int  ( int형 보다 작은 타입은 int로 바꿔놓고 연산)
                  short + short --> int

                 - boolean 절대 형 변환 되지 않는다.
                 - 대입 연산시에도 r-value 와 l-value 가 
                   동일 타입이면 형 변환 없이 대입된다.(타입 관계없이)
                   다른 타입이면 r-value의 타입과 l-value의 타입이 
                                          자동 형 변환 관계이면 변환되어 대입된다.
                                          자동 형 변환 관계가 아니면 컴파일 오류가 발생한다. 
                   


[ 자바 구문의 학습 순서 ]

- 데이터 타입 
- 변수선언
- 연산자 
- 제어문(조건제어문, 반복제어문, 분기제어문)
- 배열
- 클래스의 정의와 객체 생성
- 상속
- 다형성 
- 추상클래스와 인터페이스 
- 예외처리
- (내부클래스)



































               
    













	
        
	










  











    



















       













 








