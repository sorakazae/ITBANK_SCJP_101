
- 담당 강사명 : 김 정현
         unicodaum@hanmail.net(010-3312-7494)















- 테스트 환경
  강사시스템 접근시 : 시작 --> 실행
  		\\192.168.0.25 --> WeekJAVA_AM
  - 설치파일
    Java 7(JDK), c:\Program Files\Java
    JDK Documentation 
    Eclipse kepler(4.3)









- 8일간의 학습 스케쥴
  1일차 - 테스트 환경 구축, 자바언어의 특징, 데이타 타입, 변수 선언,  키워드, 연산자
  2일차 - 연산자, 제어문, 제어문관련 간단 실습

  3일차 - 제어문, 배열, 명령 행 데이타(프로그램 아규먼트), 메서드정의 실습
  4일차 - OOP1 - 클래스 정의와 객체 생성

  5일차 - OOP1에 대한 실습, OOP1에 대한 보강
  6일차 - OOP2 - 상속

  7일차 - 다형성, 추상클래스, 인터페이스, 예외처리 
  8일차 - Java의 주요 API(java.lang, java.util, java.io)







Java1 --> Java2  --> Java3
         --> 안드로이드
         --> Java3








[ 수업 시간 ]

9시   - 9시 50분    1교시
10시 - 10시 50분  2교시
11시 - 11시 50분  3교시
-----> 12시 30분 간식시간
12시 30분 - 1시 20분 4교시
1시 30분 - 2시 20분 5교시






- 수강동의 : http://mgr.eduitbank.com/











http://java.sun.com/  --> http://www.oracle.com/technetwork/java/index.html
http://www.eclipse.org/











자바프로젝이름 : JavaExample
클래스명 : FirstApp


 javac FirstApp.java



[ 자바 구문의 학습 순서 ]

- 데이터 타입 
- 변수선언
- 연산자 
- 제어문(조건제어문, 반복제어문, 분기제어문)
- 배열
- 클래스의 정의와 객체 생성
- 상속
- 다형성 
- 추상클래스와 인터페이스 
- 예외처리
- (내부클래스)






[ 자바언어의 특징 ]

1. 컴파일(javac) & 인터프리터(java) 언어이다.   --> 
    플랫폼에 비의존적인 프로그램을 개발할 수 있는 언어
2. OOP 언어로서 구문이 매우 견고하게 설계되었다. 
3. 자바의 실행 파일은 2진 파일이 아니라 바이트코드 파일로서
    어떠한 운영체제와도 무관한 자바만의 실행파일 구조를 가지고 있다. 
4. 자동 가비지 컬렉션(GC)을 지원한다. --> JVM 이 대신한다. 
5. 기본적으로 동적 로딩을 지원한다. 

[ 자바의 데이터 타입 ]

    숫자형(정수형, 실수형) - byte, short, int, long   float, double
    문자형                            - char
    문자열형	        - String
    논리형	                         - boolean

    데이터 타입 : 기본형 타입과 참조형(객체형) 타입 
        	         기본형 타입 : 데이테의 값을 저장하여 처리하는 타입 
                          참조형 타입 : 데이터 값은 다른 곳에 저장되어 있고 이 저장된 곳을
                                                참조하도록 논리적인 주소값을 저장하여 처리하는 타입
 

    기본형 타입 : byte(1), short(2), int(4), long(8),  
	         float(4), double(8), char(2), boolean(1)

    리터럴 : 프로그램에서 사용되는 데이터 값 자체를 의미한다.
                  리터럴도 사용되는 방식에 따라 데이터 타입이 자동으로 
                  정해진다.

	100, 200, 777777777, 7777777777L, 3.14, 10.0, 0.1, 3.14F
                 'a', '가', '1', ' '('ab', '가나', ''(오류))
                 "가나다", "123", "1", "", "abc"
	true, false

[ 변수 선언 ]

    - 데이터 값을 저장하는 메모리상의 방
    - 필요한 만큼 직접 만들어서 사용해야 한다. (변수 선언)
       (자바에서는 자동으로 선언되어 사용되는 변수 : this, super)
    -  변수에 저장할 값의 크기, 종류등을 결정하여 변수의 타입과 변수의 
       이름을 정한다.
    - 변수명은  길이에는 거의 제한이 없다(65535자)
       명사, 첫글자는 소문자로 시작한다. 새로운 워드가 등장하면 첫글자를 
       대문자로 한다.
       (name, telNumber, grade1, ...)
       자바의 식별자 규칙을 만족해야 한다. 
       (숫자로 시작은 불가, 영문대소문자, _, $ 기호 사용이 가능하다.)
    
    타입 변수명;
    타입 변수명 = 초기값;

    - 지역변수의 선언 위치가 정해져 있지 않다.

    - l-value : 방(변수)
      r-value : 값(변수, 리터럴, 연산식, 리턴값이 있는 호출식 ---> 식)

      name = 100;
      name = otherName;

   
[ 자바의 키워드(예약어) ]

   byte, short, int, long, float, double, char, boolean
   instanceof
   class, interface, extends, implements, new
   public, protecetd, private, static, abstract, final
   try, catch, finally, throws, throw
   if, switch, else, default, case, for, while, do, break, continue
   void, return

[ 자바의 연산자 ]

   연산식에 사용되는 항의 개수에 따라, 단항 연산자, 이항 연산자, 삼항 연산자로 구분

   .
   ++, --, !, ~, (타입)
   *, /, %
   +, -
   >>, >>>, <<
   >, >=, <, <=
   ==, !=, instanceof
   &, |, ^
   &&
   ||
   항1 ? 항2 : 항3
   =, +=, -=, *= ....



   ++ : 단항연산자, 주어진 항의 값을 1 증가시키는 연산자
            항의 앞과 뒤 모두 사용 가능
            항의 앞(전위형) : 먼저 증가시키고 다른 연산을 해라.
            항의 뒤(후위형) : 다른 연산을 먼저 수행하고 나중에 증가시켜라.
   -- : 1 감소키는 기능이고 나머지는 ++ 연산자와 동일

   (타입) : 강제 형 변환 연산자, 캐스팅 연산자 

                 - 연산식에 사용되는 항들의 타입이 동일할 때는 그 동일한 타입 결과를 만든다.
                 - 연산식에 사용되는 항들의 타입이 다를 때는 자동으로 하나의 타입으로 
                    일치해 놓고 연산한다. --> 자동 형변환, 내부적 형변환
                 -  자동 형변환(내부적 형변환)               
                    1. 정수타입 --> 실수타입
                    2. 방의 크기가 작은 --> 큰 타입

                    int + int --> int
                    long + long --> long
                    float + float -->float
       
                    int + long --> long
                    int + double --> double
                    long + float --> float
	 
                    char + char --> int
	   short + short --> int
                 
	-  boolean 절대 형 변환 되지 않는다. 
                 - 대입 연산시
                    r-value 와 l-value 가 동일 타입이면 형 변환 없이 대입된다. 
                   (타입 관계없이)
                    r-value 와 l-value 가 다른 타입이면 
                    r-value 의 타입과 l-value 의 타입이 자동 형 변환 관계이면 
                    변환되어 대입되나 그렇지 않으면 컴파일 오류가 발생한다.      
                
   [ 기본형 타입간의 자동 형 변환 관계 ]

   byte < short < int < long < float < double

   char <  int < long < float < double

   boolean : 자동이든 강제든 형 변환 불가

   [ 제어문 ]

   조건 제어문 : if, switch
   반복 제어문 : for, while, do-while
   분기 제어문 : break, continue


   if ( 1 )   -->  if ( true ) : 조건식 --> 연산 결과가 boolean 타입이 되는 식
                                           boolean 변수, 리터럴
                                           ==, !=, >, <, >=, <=, !, &&, ||, instanceof


   if(조건식)
      문장1;

   if(조건식)
      문장1
   else 
      문장2

   if(조건식1)
      문장1
   else if(조건식2)
      문장2
   else 
      문장3

   switch(int타입의식 또는 String 타입의 식) {
      case 값1 : 문장1;
                        문장2;
                        [break]
      case 값2 : 문장3;
                        문장4;
                        문장5;
                        [break]
               :
      default : 문장6;
    }
   
 [ 반복문 ]

 for   	: 횟수를 적용한 반복문에 적합
 while      	: 어떠한 조건이 만족되는 동안 반복을 처리하려는 경우에 적합
 do-while : while 문과 동일한 조건에 사용되는 반복문
                   while 문을 보완하는 반복으로서 
                   조건부터 평가한 후에 반복여부를 결정하는 while 문과는 다르게
                   do-while 먼저 수행부터 하고 그 다음부터 조건식의 평가 여부에
                   따라 계속해서 수행할지의 여부를 결정한다. 

 [ for 문 ]

 - 자바의 for 문은 2가지이다.
    기존 for문, 향상된 for문(JAVA 5)

    for(초기식;조건식;증감식)
    for(변수선언식 : 배열 또는 컬렉션객체)
    
    - for(초기식;조건식;증감식)
       - 초기식, 증감식, 조건식은 어떠한 것이든 생략 가능하다.
          for(;;)   --> 무한루프
       - 초기식 : 변수를 선언하는 식 또는 이미 선언되어 있는 변수에 값을
                        할당하는 식을 주로 작성하며 변수를 여러 개 선언하는 것도
                        가능하다. 또 변수에 값을 할당하는 식도 여러 개 작성할 수 
                        있는데 이 때에는 컴마(,) 로 구분한다.

                        int i=0
 	       int i=0, j=10
                        x = 100, y =10
      
       - 증감식 : 조건식에 사용되는 변수의 값을 변화시키는 식을 작성한다.
                     이 때에도 여러 개의 식을 작성할 수 있으며 컴마(,)로 구분한다.
	    
	     i++
 	     i++, j--
	     i += 5

       - 조건식 : 반드시 BOOLEAN 타입의 식을 작성한다.
                        하나의 식만 올 수 있다.
                        여러 개의 조건을 필요로 할 때는 논리연산로 결합하여
                        하나의 식으로 만들어야 한다.

	       i < 10
                        i <10 && j > 0

 [ while 문 ]

 순수하게 주어진 주건이 참인동안 계속해서 반복처리는 기능을 구현하고자
 할 때 사용한다.

 while(조건식) 
     문장;

 while(1), while() --> while(true) : 무한루프



 선조건 후수행 반복문 

 [ do - while ]

 - while 문을 확장한 반복문이다.
 - 선수행 후조건 반복문이다.
 - 조건식의 연산 결과가 처음부터 거짓이더라도 최소한 한번은 수행되는 것을
   보장받는 반복 처리에 적합하다. 

 [ break & continue ]

 - switch 문이나 반복문과 같은 제어문 안에서 제어문을 제어하고자 할 때 
   사용된다.
 - break : switch 문과 반복문내에서 사용 가능하며 
                "종료하라, 끝내라"라는 기능으로 사용된다. 
 - continue : 반복문 내에서만 사용 가능하다.
                "다음 반복으로 계속해서 진행해라.. 현재의 반복처리를 끝내고
                다음 반복 처리로 넘어가라"라는 기능으로 사용된다. 
 - 자바의 break 와 continue 는 라벨을 사용하여 외부에 있는 반복문을 제어할 수도 있다.
 [ 배열 ]

 - 복수의 데이터들을 하나의 집합으로 다룰 수 있게 지원하는 자료구조
 - 배열을 구성하는 각 데이터들을 원소(element) 또는 요소라고 한다. 
 - 배열을 생성할 때는 배열을 통해서 몇 개의 데이터를 다룰 것인가? 또한 어떠한 타입의 데이터들을 
   다룰 것인지를 먼저 결정해야 한다. 
 - 배열을 생성하는 식 : new 데이터타입[크기]

    예)  new int[10], new char[50], new double[5] ....

 - 생성된 배열은 변수에 담아서 사용해야 한다. 
    배열의 타입에 따라 적당한 배열 변수를 선언하여 담아서 사용해야 한다.
    배열 변수의 선언 방법 : 데이터타입 변수명[ ], 데이터타입[ ] 변수명
   
    예) int ary[ ],   int[ ] cary,  double dary[ ]

 - int ary[ ] = new int[10];

    ary[0], ary[1], ary[2] .... ary[9]


[메서드]
 -자바에서의 메서드는 객체의기능, 객체의 행위 이런것들을 정의하는 단위다.
- 자바에서 수행코드를 정의하는 단위다.
변수를 선언하는 문장을 제외하고 모든 수행 문장은 메서드 안에 있어야한다.
-메서드는 클래스 안에 정의해야한다,
-메서드를 생성할때 알아야하는 구문
(1) 메서드 명은 자바의 식별자 규칙을 준수해야 하며
가급적 동사로 시작하고 소문자로 시작한다. 새로운 워드가 등장할 때 첫글자를 대문자로 한다.
예) drawString(),drawRect(),setName(), getName()
(2)메서드의 명은 반드시 괄호(소)를 붙여야 한다,
(3) 메서드 명 뒤에 붙는 괄호 안에는 필요에 따라 변수를 선언한다.
이 변수를 매개변수라고 하는데 개수와 타입에는 제한이 없다.
(4) 메서드 명의 앞에는 리턴값의 타입을 지정해야한다,
리턴값이 없는 경우에는 void 라는 타입을 지정한다.
리턴값은 반드시 하나만을 리턴할 수 있으며 여러개의 값을 리턴해야 하는 경우에는
배열 타입 또는 객체 타입을 사용한다.
(5) 메서드명, 매게변수 사양, 리턴값의 유형을 정의하는 부분을 메서드 헤더라고 한다,
메서드의 헤더 뒤에는 반드시 블럭({...})이 와야하며 이부분을 메서드 바디라고 한다.



   -verbose:class

[ 클래스 ]

1. 자바 프로그래밍 언어의 기본 구조 
2. 구축하고자 하는 시스템에서 필요로 하는 객체를 프로그램 코드로 만드는 것(객체의 설계도)
3. 클래스는 필요한 만큼의 멤버 변수와 메서드로 구성된다. 

[ 생성자 메서드 ]

- 용도 : 클래스를 객체화(인스턴스화)할때 객체를 초기화 하는 역할의 메서드
             객체 초기화란 클래스의 인스턴스(non-static) 변수에 값을 할당는 것 
- 생성방법 : 메서드명이 클래스명과 동일해야 한다. 
                     리턴값의 타입을 지정하지 않는다. 
                     여러 개로 오버로딩이 가능하다. 
                     this() 메서드를 사용하여 생성자 메서드 내에서 다른 생성자 호출하는 것이 
                     가능하다. (반드시 첫번째 수행 문장이어야 한다.)
                     this - this 가 구현된 클래스의 객체를 참조하는 변수 
                               나 자신의 객체, 나의 멤버 XXX
                               매개변수(지역변수)와 멤버변수의 이름 동일할 때 
                               생성자 메서드, 일반 메서드에서 자동으로 선언되는 변수이다. 


  클래스의 객체를 생성하여 참조형 변수에 담은 다음
  이 참조형 변수와 .(멤버연산자)연산자로  객체의 멤버 변수를 사용할 때와 메서드를 사용할 때
  사용되는 규칙이 다르다. 

  멤버 변수는 참조형 변수의 타입에 의해 사용되는 변수가 결정되고 
  메서드는  참조하게된 객체의 타입에 의해 사용되는 메서드가 결정된다. 

 [ 예외 처리 구문 ]

 실행 오류 : 에러 - JVM 단에서 발생하는 실행 오류로 자바 프로그램이 더이상 수행 불가한 심각한 오류
                 예외 - 자바 프로그램에서 발생되는 오류로 발생 원인에 따라
                          런타임 예외 : 주로 프로그램의 버그에 의해 발생하는 것으로 프로그램을 구현할 때
                                             견고하게 구현하는 방법으로 해격하는 것이 가장 좋은 방법이다. 
                                             예외 처리를 생략할 수 있다. 이유는 JVM 대신 처리해 준다. 
                          일반 예외 : 주로 외부적인 요인에 의해 발생되는 것으로 이러한 예외는 반시 예외 처리
                                          구문을 가지고 이 예외가 발생되면 어떻게 할 것인지를 구현해야 한다. 
 
 1. 어떠한 예외가 런탄인 예외인지 일반 예외인지 구별하는 방법
 2. 메서드 호출시 예외처리를 해야 하는 메서드를 구별하는 방법
 3. 예외 처리를 구현할 때 사용되는 구문

 - 예외 처리를 구현할 때 사용되는 구문 

   1. try-catch-finally 구문

   2. throws 구문

 catch(처리하려는 예외 클래스 타입의 변수 선언) {

 }

 - 예외를 발생시키는 구문
   
   throw 예외객체;

   throw new IOException("입출력 오류");

   TestException e = newTestException("....");
   throw e;


 [ Java의 API ]

 자바는 API 가 상당히 많은 프로그래밍 언어이다.
 JDK 설치시 같이 설치되는 API 들을 자바의 표준 API 리고 한다.
 자바의 표준 API 는 3개의 패키지로 분류된다.

 java, javax, org...

 java : 자바의 기본(CORE) API 들로서 자바만의 API 들이다.
 javax : 자바의 확장 API 들로서 자바만의 API 들이다.
 org : 자바만의 API 가 아니며 어떠한 표준을 지원하기 위해 자바가 포함하고
        API 들이다. 이 패키지에 속한 API 들은 C++, C# 등의 언어에서도 
        사용할 수 있는 API 들이다. 

 java.lang, java.util, java.io

 java.lang : 자바가 프로그래밍 언어로서 필요하는 기장 기본적인 API 들을 담고
               있는 패키지로서 자동으로 import 되는 유일한 패키지다. 
 java.util : 이런 저런 유용한 기능의 API 들이 모여있는 패키지로서 
              프로그램 개발시 가장 많이 사용되는 패키지이다. 
 java.io : 자바 프로그램이 수행하는 동안 필요로 하는 데이터를 입력 받거나 
            수행 결과를 출력하는 것과 관련된 유용한 API 들을 담고 있는 패키지로서 
            파일 입출력, 네트워크 입출력 등 프로그램의 입출력과 관련된 모든 
            구현은 이 패키지의 API 를 사용한다. 


 'A' "ABC", "A"  -> String 클래스 타입의 객체로 취급
 멤버 연산자인 . 연산자는 l-value  로는 객체 또는 객체를 참조하는 변수
 r-value 로는 참조하는 객체의 멤버(변수, 메서드)가 온다.

 "A".length()
 "A".toUpperCas()
 "A".charAt(0)  --> 'A'

 [String & StringBuffer]
  
 String : 문자열을 읽어서 처리하는 용도
 StringBuffer : 문자열을 편집하는 용도

 [ 자료 구조 ]

 List  :  저장되는 데이터들의 저장 순서를 유지해준다. 데이터들의 중복 허용
 Set  :  저장되는 데이터들의 저장 순서 유지 불가, 데이터들의 중복불가  
 Hashtable(Map) : 데이터들을 저장할 때 key-value 쌍으로 저장하고 
                        key 가지고 저장된 데이터를 제어하는 자료 구조이다. 
 Iterator : 컬렉션 객체(List, Set, Map)에 저장된 데이터들을 하나하나 꺼내는 
              기능을 제공하는 API 로서 컬렉션 클래스들의 도우미 API 이다.
              hasNext(), next() 메서드를 지원한다. 









































    







 
   





















   











    	
























































               
    













	
        
	










  











    



















       













 








